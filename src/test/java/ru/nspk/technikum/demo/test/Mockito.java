package ru.nspk.technikum.demo.test;

import org.junit.jupiter.api.Test;

import java.util.Iterator;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Демонстрационный класс с тестом, использующим Mockito для создания мок-объектов.
 *
 * Этот класс показывает базовое применение библиотеки Mockito в юнит-тестах.
 * Mockito позволяет создавать мок-объекты (заменители реальных объектов) и настраивать их поведение,
 * что полезно для изоляции тестируемого кода от зависимостей.
 *
 * В данном примере мокируется интерфейс Iterator, чтобы симулировать последовательные вызовы метода next().
 * Это демонстрирует, как настроить несколько возвращаемых значений для одного и того же метода.
 *
 * Источник вдохновения: https://habr.com/ru/articles/243155/
 */
public class Mockito {

    /**
     * Тест, проверяющий поведение мок-итератора с последовательными возвращаемыми значениями.
     *
     * Шаги теста:
     * 1. Создание мок-объекта Iterator с помощью Mockito.mock().
     * 2. Настройка поведения метода next() с помощью when().thenReturn() для двух последовательных вызовов:
     *    - Первый вызов возвращает "Hello".
     *    - Второй вызов возвращает "World".
     * 3. Выполнение вызовов next() и формирование результирующей строки.
     * 4. Проверка результата с помощью assertEquals(), чтобы убедиться, что строка равна "Hello World".
     *
     * Этот тест иллюстрирует, как Mockito упрощает тестирование кода, зависящего от итераторов или других интерфейсов,
     * без необходимости создания реальных реализаций.
     *
     * @throws AssertionError если результат не соответствует ожидаемому (например, если мок не сработал корректно)
     */
    @Test
    public void iteratorWillReturnHelloWorld() {
        // Подготавливаем мок-объект Iterator
        Iterator i = mock(Iterator.class);

        // Настраиваем последовательные возвращаемые значения для метода next()
        when(i.next()).thenReturn("Hello").thenReturn("World");

        // Выполняем вызовы и формируем результат
        String result = i.next() + " " + i.next();

        // Проверяем, что результат соответствует ожидаемому
        assertEquals("Hello World", result);
    }
}
